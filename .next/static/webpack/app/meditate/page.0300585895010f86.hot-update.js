"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/meditate/page",{

/***/ "(app-pages-browser)/./app/components/MeditationVisuals.tsx":
/*!**********************************************!*\
  !*** ./app/components/MeditationVisuals.tsx ***!
  \**********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ MeditationVisuals; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var framer_motion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! framer-motion */ \"(app-pages-browser)/./node_modules/framer-motion/dist/es/render/components/motion/proxy.mjs\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\nconst EMOJIS = [\n    \"✨\",\n    \"\\uD83C\\uDF1F\",\n    \"\\uD83D\\uDCAB\",\n    \"⭐\",\n    \"\\uD83C\\uDF19\",\n    \"☁️\",\n    \"\\uD83C\\uDF08\",\n    \"\\uD83C\\uDF38\",\n    \"\\uD83C\\uDF3A\",\n    \"\\uD83C\\uDF3C\"\n];\nconst COLORS = [\n    \"#FF6B6B\",\n    \"#4ECDC4\",\n    \"#FFD93D\",\n    \"#95E1D3\",\n    \"#FF8B94\",\n    \"#A8E6CF\",\n    \"#FFD3B6\",\n    \"#AA96DA\"\n];\nfunction MeditationVisuals(param) {\n    let { isBreathingIn } = param;\n    _s();\n    const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const particlesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const animationFrameRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) return;\n        // Set canvas size\n        const resizeCanvas = ()=>{\n            canvas.width = window.innerWidth;\n            canvas.height = window.innerHeight;\n        };\n        resizeCanvas();\n        window.addEventListener(\"resize\", resizeCanvas);\n        // Initialize particles\n        const initParticles = ()=>{\n            const particles = [];\n            const particleCount = 40 // Increased count but smaller size\n            ;\n            for(let i = 0; i < particleCount; i++){\n                particles.push({\n                    x: Math.random() * canvas.width,\n                    y: Math.random() * canvas.height,\n                    size: Math.random() * 8 + 6,\n                    speedX: (Math.random() - 0.5) * 1.2,\n                    speedY: (Math.random() - 0.5) * 1.2,\n                    opacity: Math.random() * 0.2 + 0.5,\n                    emoji: EMOJIS[Math.floor(Math.random() * EMOJIS.length)],\n                    rotation: Math.random() * 360,\n                    rotationSpeed: (Math.random() - 0.5) * 1.5,\n                    color: COLORS[Math.floor(Math.random() * COLORS.length)]\n                });\n            }\n            particlesRef.current = particles;\n        };\n        initParticles();\n        // Animation loop\n        const animate = ()=>{\n            if (!ctx || !canvas) return;\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            // Calculate center area to avoid\n            const centerX = canvas.width / 2;\n            const centerY = canvas.height / 2;\n            const avoidRadius = 200 // Radius of the area to avoid\n            ;\n            particlesRef.current.forEach((particle)=>{\n                // Update particle position\n                particle.x += particle.speedX;\n                particle.y += particle.speedY;\n                particle.rotation += particle.rotationSpeed;\n                // Keep particles away from center\n                const dx = particle.x - centerX;\n                const dy = particle.y - centerY;\n                const distance = Math.sqrt(dx * dx + dy * dy);\n                if (distance < avoidRadius) {\n                    // Push particle away from center\n                    const angle = Math.atan2(dy, dx);\n                    particle.x = centerX + Math.cos(angle) * avoidRadius;\n                    particle.y = centerY + Math.sin(angle) * avoidRadius;\n                    // Adjust speed to move away from center\n                    particle.speedX = Math.cos(angle) * 1.2;\n                    particle.speedY = Math.sin(angle) * 1.2;\n                }\n                // Bounce off edges with a slight random angle\n                if (particle.x < 0 || particle.x > canvas.width) {\n                    particle.speedX *= -1;\n                    particle.speedY += (Math.random() - 0.5) * 0.3;\n                }\n                if (particle.y < 0 || particle.y > canvas.height) {\n                    particle.speedY *= -1;\n                    particle.speedX += (Math.random() - 0.5) * 0.3;\n                }\n                // Breathing effect\n                const breathingScale = isBreathingIn ? 1.2 : 0.9;\n                const currentSize = particle.size * breathingScale;\n                // Draw particle\n                ctx.save();\n                ctx.translate(particle.x, particle.y);\n                ctx.rotate(particle.rotation * Math.PI / 180);\n                // Draw background glow\n                const gradient = ctx.createRadialGradient(0, 0, 0, 0, 0, currentSize * 1.2);\n                gradient.addColorStop(0, \"\".concat(particle.color, \"30\")) // Reduced glow opacity\n                ;\n                gradient.addColorStop(1, \"transparent\");\n                ctx.fillStyle = gradient;\n                ctx.beginPath();\n                ctx.arc(0, 0, currentSize * 1.2, 0, Math.PI * 2);\n                ctx.fill();\n                // Draw emoji\n                ctx.font = \"\".concat(currentSize, \"px Arial\");\n                ctx.textAlign = \"center\";\n                ctx.textBaseline = \"middle\";\n                ctx.fillText(particle.emoji, 0, 0);\n                ctx.restore();\n            });\n            animationFrameRef.current = requestAnimationFrame(animate);\n        };\n        animate();\n        return ()=>{\n            window.removeEventListener(\"resize\", resizeCanvas);\n            if (animationFrameRef.current) {\n                cancelAnimationFrame(animationFrameRef.current);\n            }\n        };\n    }, [\n        isBreathingIn\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_2__.motion.div, {\n        initial: {\n            opacity: 0\n        },\n        animate: {\n            opacity: 1\n        },\n        className: \"fixed inset-0 pointer-events-none\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"canvas\", {\n            ref: canvasRef,\n            className: \"w-full h-full\"\n        }, void 0, false, {\n            fileName: \"D:\\\\openmeditation\\\\app\\\\components\\\\MeditationVisuals.tsx\",\n            lineNumber: 163,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"D:\\\\openmeditation\\\\app\\\\components\\\\MeditationVisuals.tsx\",\n        lineNumber: 158,\n        columnNumber: 5\n    }, this);\n}\n_s(MeditationVisuals, \"6PpvaNwmUxZoGab6d6qCazrjpts=\");\n_c = MeditationVisuals;\nvar _c;\n$RefreshReg$(_c, \"MeditationVisuals\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/components/MeditationVisuals.tsx\n"));

/***/ })

});